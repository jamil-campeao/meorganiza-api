generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum TransactionType {
  RECEITA // "receita"
  DESPESA // "despesa"
  TRANSFERENCIA 
}

enum AccountType {
  CONTA_CORRENTE
  CONTA_POUPANCA
  INVESTIMENTO
  OUTRO
}

enum CardType {
  CREDITO
  DEBITO
}

// --- Models ---

model User {
  id                      Int               @id @default(autoincrement()) 
  name                    String            
  email                   String            @unique 
  password                String            
  notificationPreference  String?           
  createdAt               DateTime          @default(now())
  active                  Boolean           @default(true)

  transactions            Transaction[]
  investments             Investment[]
  notifications           Notification[]
  bankStatements          BankStatement[]
  balanceForecasts        BalanceForecast[]
  category                Category[]
  accounts                Account[]
  cards                   Card[]
}

model Transaction {
  id          Int             @id @default(autoincrement()) 
  type        TransactionType
  value       Decimal         @db.Decimal(10, 2) 
  date        DateTime        
  description String          
  
  user        User            @relation(fields: [userId], references: [id])
  userId      Int
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  Int
  account     Account?        @relation(fields: [accountId], references: [id])
  accountId   Int?
  card        Card?           @relation(fields: [cardId], references: [id])
  cardId      Int?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?
}


model Category {
  id          Int             @id @default(autoincrement())
  description String          
  type        TransactionType 
  active      Boolean         @default(true)
  user        User            @relation(fields: [userId], references: [id])
  userId      Int

  transactions Transaction[]
}


model Investment {
  id                Int       @id @default(autoincrement())
  type              String    
  description       String   
  quantity          Decimal   @db.Decimal(10, 4) 
  acquisitionValue  Decimal   @db.Decimal(10, 2) 
  acquisitionDate   DateTime  
  active            Boolean   @default(true)

  user    User @relation(fields: [userId], references: [id])
  userId  Int
}


model Notification {
  id      Int       @id @default(autoincrement()) 
  message String   
  sentAt  DateTime  
  read    Boolean   @default(false) 

  user    User      @relation(fields: [userId], references: [id])
  userId  Int
}

model BankStatement {
  id          Int       @id @default(autoincrement()) 
  fileType    String    
  importDate  DateTime 
  fileName    String  

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model BalanceForecast {
  id            Int      @id @default(autoincrement()) 
  futureBalance Decimal  @db.Decimal(10, 2)
  forecastDate  DateTime 
  
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String @unique
  logo String?

  accounts Account[]
}

model Account {
  id      Int         @id @default(autoincrement())
  name    String
  type    AccountType
  balance Decimal     @db.Decimal(10, 2)
  active  Boolean     @default(true)

  user    User        @relation(fields: [userId], references: [id])
  userId  Int
  bank    Bank        @relation(fields: [bankId], references: [id])
  bankId  Int

  transactions Transaction[]
  cards        Card[]
}

model Card {
  id          Int      @id @default(autoincrement())
  name        String
  type        CardType
  limit       Decimal  @db.Decimal(10, 2)
  closingDay  Int      // Dia do fechamento da fatura
  dueDate     Int      // Dia do vencimento da fatura
  active      Boolean  @default(true)

  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  account Account @relation(fields: [accountId], references: [id])
  accountId Int

  invoices Invoice[]
  transactions Transaction[]
}

model Invoice {
  id          Int       @id @default(autoincrement())
  month       Int       // Mês da fatura (1-12)
  year        Int       // Ano da fatura
  totalAmount Decimal   @db.Decimal(10, 2)
  isPaid      Boolean   @default(false)

  card        Card      @relation(fields: [cardId], references: [id])
  cardId      Int

  transactions Transaction[]

  @@unique([cardId, month, year]) // Garante que só exista uma fatura por cartão, mês e ano
}